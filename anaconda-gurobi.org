#+TITLE:     Anaconda + Gurobi による科学技術計算環境の構築
#+AUTHOR:    Takeshi Nagae
#+EMAIL:     nagae@m.tohoku.ac.jp
#+LANGUAGE:  ja
#+OPTIONS:   H:3 num:3 toc:2 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:t creator:t
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+OPTIONS: toc:1 num:3

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:imagemagick
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.5h)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:<link rel=stylesheet href="style.css" type="text/css">
#+HTML_LINK_UP: https://nagae.github.io/itl
#+HTML_LINK_HOME: https://nagae.github.io
#+INFOJS_OPT: view:showall toc:t sdepth:2 ltoc:1 mouse:nil buttons:nil
#+LATEX_HEADER:\usepackage{amsmath,rmss_math,rmss_color}

* pyenv + Anaconda + Gurobi
- Anaconda は jupyter や spyder など, Python 開発に便利なツールや科学計算に必要なライブラリがセットで入ったパッケージ.
  ただし, そのままインストールすると Mac OS システム自体に備わった環境を壊しかねない.

- この「汚染」を防止するために, Python の環境を管理できるツールである pyenv で Anaconda を包む.

- Gurobi は Python / C / Java などで使える最適化のためのパッケージ. homebrew/python とは整合しないが,
  Anaconda Python との共存は可能.

* pyenv のインストール
- [[./homebrew.org][Homebrew]] の段階で既にインストールされているはず．

  ターミナルから以下を入力
  #+BEGIN_SRC sh
    echo '' >> ~/.bash_profile 
    echo '# the following lines were inserted for pyenv' >> ~/.bash_profile
    echo 'export PYENV_ROOT="${HOME}/.pyenv"' >> ~/.bash_profile
    echo 'export PATH="${PYENV_ROOT}/bin:$PATH"' >> ~/.bash_profile
    echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
    echo '# the above lines were inserted for pyenv' >> ~/.bash_profile
    exec $SHELL -l
  #+END_SRC

* Anaconda のインストール
- =pyenv= を使って Anaconda3 系の最新バージョンを確認する

  ターミナルから以下を入力
  #+BEGIN_SRC sh
    pyenv install -l | grep anaconda3-
      # 対応するバージョンが表示される
      anaconda3-2.0.0
      anaconda3-2.0.1
      anaconda3-2.1.0
      anaconda3-2.2.0
      anaconda3-2.3.0
      anaconda3-2.4.0
      anaconda3-2.4.1
      anaconda3-2.5.0
      anaconda3-4.0.0
      anaconda3-4.1.0
      anaconda3-4.1.1
      anaconda3-4.2.0
      anaconda3-4.3.0
      anaconda3-4.3.1
      anaconda3-4.4.0
      anaconda3-5.0.0
      anaconda3-5.0.1
      anaconda3-5.1.0
      anaconda3-5.2.0
      anaconda3-5.3.0 # ← 最新版のバージョンを覚えておく
  #+END_SRC
- =pyenv= を使って Anaconda をインストールする
  
  ターミナルから以下を入力
  #+BEGIN_SRC sh
    pyenv install anaconda3-5.3.0 # 上で確認した最新版を入力
  #+END_SRC

- =pyenv global= を使って Python 環境を Anaconda3系 に切り替える
  #+BEGIN_SRC sh
    pyenv global anaconda3-5.3.0
  #+END_SRC

* =conda= を使った Python モジュール管理
Anaconda と同時にインストールされる =conda= という Python 用パッケージ管理ツールを使えば,
新しいモジュールをインストールしたり, 既存のモジュールをアップデートしたりできる.

Anaconda のインストールが終わったら，ターミナルから下記を実行しよう:
#+BEGIN_SRC sh
conda update conda # conda 自身をアップデート
conda update --all # インストールされているモジュールをアップデート
#+END_SRC

次に，長江研で必要になる(or 必要になりそうな)モジュールは，以下の通り：
1. numpy
2. scipy
3. matplotlib
4. pandas
5. networkx
特に最初の3つは無いと途方に暮れるレベルなので, =conda install= でインストールしておこう．
#+BEGIN_SRC sh
conda install numpy scipy matplotlib pandas networkx
#+END_SRC

Python =conda= は =homebrew= の Anaconda/Python 版. 
主な使い方は，ターミナルから下記のようなコマンドで利用可能.
#+BEGIN_SRC sh
conda install [モジュール名] # 指定したモジュールをインストール 
conda search [モジュール名] # 指定したモジュールを検索(*などのワイルドカードも使える)
conda update conda # conda 自身をアップデート
conda update --all # 全てのモジュールをアップデート
#+END_SRC
=conda install= や =conda update= を実行するとどうなるかが知りたいだけの場合は, =--dry-run= オプションをつけて
#+BEGIN_SRC sh
conda install --dry-run [モジュール名]
conda update --dry-run --all
#+END_SRC
などとするとよい．

* Gurobi のインストール
- =conda= を使って Gurobi をインストールする :
  #+BEGIN_SRC sh
  conda config --add channels http://conda.anaconda.org/gurobi
  conda install gurobi
  #+END_SRC

  参考: http://www.gurobi.com/downloads/get-anaconda

- ライセンスをインストールする
  参考: http://www.gurobi.com/documentation/7.0/quickstart_mac/retrieving_a_free_academic.html#subsection:academiclicense

** Gurobi アカウントの作成とアカデミック・ライセンスの取得
以下の情報は
http://www.gurobi.com/products/licensing-and-pricing/academic-licensing に基づい
ている．
*** Gurobi のアカウント・ライセンスについて
Gurobi のアカデミック・ライセンスは以下の制約の下で利用可能である：
- 学位授与機構を備えた学術機関の教員・学生もしくはスタッフのみが利用できる
- 研究もしくは教育目的にのみ利用できる
- 公認の学術機関ドメインから validate される必要がある．アカデミック・ライセンス
  の有効期限は12ヶ月だが，適切な教員・学生もしくはスタッフは，この手続きを繰り返
  すことでライセンスを更新できる．

*** アカウント作成，ライセンスの取得および認証の方法
1. http://www.gurobi.com にアクセスし，Register をクリック
   #+ATTR_HTML: :width 720
   [[file:fig/grb_register.png]]
2. 以下に従って必要な情報を入力:
   - Account Type は「Academic」を選択
   - Email は =tohoku.ac.jp= で終わるアドレスを入力
   - Company/University には「Tohoku University」を入力
3. 登録したメールアドレスにメールが届くので, それに従ってパスワードを設定する.
4. http://www.gurobi.com のメニューバーから Login する
5. http://www.gurobi.com のメニューバーから DOWNLOADS > Licenses > University License を選択
   #+ATTR_HTML: :width 720
   [[file:fig/grb_menu_university_license.png]]
6. Free Academic License のページが表示されるので, End User License Agreement を
   よく読んだ後, 2箇所をチェックして Request License する.
   #+ATTR_HTML: :width 720
   [[file:fig/grb_academic_license.png]]
7. ライセンスが発行される. 
   ここで表示される
   =grbgetkey= 以下のコマンドを, *大学のネットワークに繋がった状態で* 
   ターミナルに入力して実行すると
   ユーザーディレクトリ(=/Users/****=)にライセンスファイルが生成され, 
   登録が完了する.
   #+ATTR_HTML: :width 720
   [[file:fig/grb_license_detail.png]]
*** COMMENT Gurobi のダウンロードとインストール
1. http://www.gurobi.com のメニューバーから Download > Gurobi Optimizer のページ
   に移動し，Current version: 5.6.3 の Mac OS 版と READ ME を選択してDownload する．
   #+ATTR_HTML: width=720
   [[file:fig/grb_Mac_OS_Download.png]]
2. README.txt に従ってインストールする(ダウンロードした pkg ファイルをダブルクリッ
   クすればインストールできる)．実行ファイルなどは
   #+BEGIN_SRC example
   /Library/gurobi***/mac64
   #+END_SRC
   以下にインストールされる．ここで, =***= は Gurobi のバージョンによって変わる．
   バージョンが =5.6.3= なら，パスは =/Library/gurobi563/mac64= になる．
   
3. ターミナルを立ち上げ，上記のライセンス取得コマンドを実行する：
   #+BEGIN_SRC sh
     grbgetkey ae36ac20-16e6-acd2-f242-4da6e765fa0a # このキーは実際には使用できない
   #+END_SRC
   
   Gurobi のサーバーに接続して認証が完了すると，ライセンスファイルの生成場所を尋
   ねてくる：
   #+BEGIN_SRC sh
   Gurobi license key client (version x.x.x) # x.x.x はバージョンによって変わる
Copyright (c) 2012, Gurobi Optimization, Inc.

-------------------------------
Contacting Gurobi key server...
-------------------------------

Key for license ID 45789 was successfully retrieved.
License expires at the end of the day on 2014-08-26.

---------------------
Saving license key...
---------------------

In which directory would you like to store the Gurobi license key file?
[hit Enter to store it in /Users/[username]]]: 
   #+END_SRC
   デフォルトではホームフォルダにライセンスファイルが生成される．
4. ターミナルで =gurobi.sh= を実行してエラーが出なければOK:
   #+BEGIN_SRC sh
     $ gurobi.sh                     # gurobi.sh を実行
     Python 2.7.5 (default, Aug 25 2013, 00:04:04) 
     [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
     Type "help", "copyright", "credits" or "license" for more information.

     Gurobi Interactive Shell (mac64), Version 5.6.3
     Copyright (c) 2013, Gurobi Optimization, Inc.
     Type "help()" for help
   #+END_SRC
   ここでは Ctrl-D を押して終了させよう．

   ライセンスファイルが無効な場合，以下のようなメッセージが表示される：
   #+BEGIN_SRC sh
     Python 2.7.2 (default, Oct 11 2012, 20:14:37) 
     [GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
     Type "help", "copyright", "credits" or "license" for more information.
     Traceback (most recent call last):
       File "/usr/local/lib/gurobi.py", line 5, in <module>
         from gurobipy import *
       File "/usr/local/lib/python2.7/site-packages/gurobipy/__init__.py", line 1, in <module>
         from gurobipy import *
       File "gurobi.pxi", line 11, in init gurobipy (../../src/python/gurobipy.c:72659)
       File "env.pxi", line 27, in gurobipy.Env.__init__ (../../src/python/gurobipy.c:3099)
     gurobipy.GurobiError: No Gurobi license found (user nagae, host iMac-Late2012.local, hostid b1b0acc5)
   #+END_SRC
   この場合も終了させるには Ctrl-D．



* COMMENT Python の環境構築
** Python のバージョン確認
- Gurobi は Mac OS X デフォルトの Python しかサポートしない([[https://groups.google.com/d/msg/gurobi/ghzhXNugDxs/mFNWanBl1fMJ][参考]])．まずは Python
  のバージョンを確認：
  #+BEGIN_SRC sh
  $ which python                  # Python へのパスが
  /usr/bin/python                 # /usr/bin/python となっていることを確認 
  $ python --version              # Python のバージョンが
  Python 2.7.5                    # 2.7.5 になっていることを確認
  #+END_SRC
- もし homebrew などで別のバージョンの python を入れてしまっている場合は Gurobi
  が正常に機能しないので unlink (一時停止) か uninstall (消去)しておく．
  - unlink (一時停止)する場合:
    #+BEGIN_SRC sh
      $ brew unlink python            # /usr/loca/bin/python を一時的に使わなくする
    #+END_SRC
  - unlinstall (消去)する場合
    #+BEGIN_SRC sh
      $ brew uninstall python            # /usr/loca/bin/python を完全に消去する
    #+END_SRC
** Homebrew と System Python が「共存」できる環境を用意する
参考： https://github.com/Homebrew/homebrew/wiki/Gems,-Eggs-and-Perl-Modules

これまでの設定方法だと，Python パッケージをインストールするには =sudo= が必要．
しかし， =sudo= は管理者権限を要求するため危険を伴う．
パッケージが =/Library/Python/x.y/= 以下を「汚染」するのも好ましくない．
そこで， =easy_install= や =pip= 管理者権限を要求せずに
パッケージを =~/Library/Python/x.y/lib/python/site-packages= 以下にインストール方法を示す．

1) 環境変数 =PYTHONPATH= に homebrew 下の =site-packages= へのパスを追記する．
   - =~/.bash_profile= に 以下を追加する：
     #+BEGIN_SRC sh
     export PATH=~/Library/Python/2.7/bin:$PATH
     export PYTHONPATH=/usr/local/lib/python2.7/site-packages
     #+END_SRC
2) Python パッケージを格納するディレクトリを作成し， =homebrew= 下の =site-packages= を読みに行くように設定
   - 以下を実行
     #+BEGIN_SRC sh
       mkdir -p ~/Library/Python/2.7/lib/python/site-packages
       echo '/usr/local/lib/python2.7/site-packages' >> ~/Library/Python/2.7/lib/python/site-packages/homebrew.pth
     #+END_SRC

これで後はインストールの際に =pip install --user= とすることで，適切なフォルダにインストールされる

** pip と homebrew を使って Python のパッケージを充実させる
http://joernhees.de/blog/2013/06/08/mac-os-x-10-8-scientific-python-with-homebrew/
に紹介されているパッケージを入れる．ただし，このサイトでは python の最新版を
homebrew でインストールすることを前提としてるが，それだと Gurobi が動かない．

OS X Mavericks にはデフォルトで =Python 2.7.5= と以下のモジュールが入っている：
- numpy 1.6.2
- scipy 0.11.0
- matplotlib 1.1.1

そこで，ここでは，Mac OS X デフォルトの Python 用の =pip= をインストールし，
それを使ってパッケージを追加する方法を述べる．

また, =pip= でインストールできる(i.e. Python関係)パッケージは極力 =pip= を用いる
こととした．

1. pip のインストール
   pip は Python 用のパッケージインストーラである．homebrew 版 python には pip
   も含まれるが，Mac OS X デフォルト版にはそれが無いのでインストールする．
   #+BEGIN_SRC sh
     curl https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py | sudo python
   #+END_SRC
2. homebrew のリポジトリに =homebrew/science= と =homebrew/python= を追加する：
   #+BEGIN_SRC sh
     brew tap homebrew/science # a lot of cool formulae for scientific tools
     brew tap homebrew/python # python libraries
     brew update && brew upgrade
   #+END_SRC

4. 順番に色々入れていく：
   - 2014.04.09 :: パッケージを少し減らした
   #+BEGIN_SRC sh
     # 仮想環境構築
     pip install --user -U virtualenv nose # virtualenv は Python の仮想環境を構築するもの．

     # 科学技術計算用(Numpy, Scipy)
     # pip install scipy が通らなくなったので，homebrew からインストールするようにした
     # → Homebrew 版は numpy 1.8.1 から python 2.7.6 に依存するようになったので再び pip 版に
     # → Homebrew 版の依存問題は解決
     brew install numpy
     brew install scipy
     brew install matplotlib --with-tex
     pip install --user -U sympy # SymPy はシンボリックな数式処理のためのライブラリ

     # 画像処理
     brew install pillow
     brew install graphviz # imagemagick は画像の操作・表示のためのソフトウェア．graphviz はグラフ描画ソフトウェア．
     brew install cairo # cairo はベクトルベースのフリーの2Dグラフィックスライブラリ
     brew install py2cairo           # cairo 用の python 2.x バインディング

     # ネットワーク分析
     pip install --user -U networkx    # NetworkX はネットワーク分析用パッケージ
          
     # デバッグ出力
     pip install --user -U q            # q はお手軽なデバッグ出力用のパッケージ

     # インタラクティブ・モードの強化
     brew install qt pyqt # Qt は GUIツールキット．pyqt はその Python バインディング
     brew linkapps        # qt のツールを /Application フォルダにコピー
     brew install zmq # ZeroMQ は軽さがウリのMQ(message queuing, アプリケーション間データ交換方式の1つ)
     easy_install --install-dir=~/Library/Python/2.7/lib/python/site-packages --script-dir=~/Library/Python/2.7/bin readline    # iPython で補完や履歴を表示させるのに必要(iPython では easy_install版が強く推奨されている)
     pip install --user -U ipython[zmq,qtconsole,notebook,test] # iPython は Python のインタラクティブ・モードを進化させたもの
   #+END_SRC
   
* COMMENT =matplotlib/basemap= のインストール
Python のグラフ描画パッケージ =matplotlib= 上で地理情報データを表示できるサブモジュールが =basemap=.
参考URL: http://blog.bluedackers.com/2012/11/13/installing-basemap-on-mac-os-x-mountain-lion/
1. GEOS(geometry engine open source), matplotlib-basemap および OWSlib をインストール
   #+BEGIN_SRC sh
     brew install geos
     brew install matplotlib-basemap
     pip install --user owslib
   #+END_SRC
   Homebrew で =matplotlib-basemap= が提供されたため，インストールが劇的に簡単になった(参考:https://github.com/Homebrew/homebrew-python/issues/112)
   =pip= 経由でインストールしてうまく動かなかった人は,
   #+BEGIN_SRC sh
     pip uninstall basemap
     brew install matplotlib-basemap
   #+END_SRC
2. Python で以下のスクリプトを実行してみる
   #+HTML: <script src="https://gist.github.com/nagae/9243923.js"></script>   
   #+BEGIN_SRC sh
   cd ~/Downloads/
   curl -O https://gist.githubusercontent.com/nagae/9243923/raw/sample_wms_basemap.py
   python sample_wms_basemap.py
   #+END_SRC
   
* COMMENT Gurobi / Python の環境構築
** Gurobi をアップグレードする場合
新しいパッケージをダウンロード→インストールする．ライセンスの更新は不要．
* jupyter を使ってみる
** jupyter とは
Python の対話型インタープリタを拡張したもの. 
- jupyter console :: ハイライトや補完が可能なインタプリタを *ターミナル上* で起動.
- jupyter qtconsole :: グラフをインライン表示できる高機能なインタプリタを *別ウィンドウ上* で起動. 
- jupyter notebook :: ノート機能つきの高機能なインタプリタを *ブラウザ上* で起動.
** jupyter qtconsole を使ってみる
:PROPERTIES:
:ORDERED:  t
:END:
- ターミナルから以下を入力:
  #+BEGIN_SRC sh
  jupyter qtconsole &
  #+END_SRC
  行末に =&= をつけないと, jupyter qtconsole を閉じるまでターミナルが入力を受け付けなくなる.

- 線形計画問題の例を入力
  
  開いたコンソールに以下を入力. =Ctrl+RET= で(実行せずに)セル内で改行. =Shift+RET= でセルを実行.
  #+BEGIN_SRC python
    from gurobipy import *
    m = Model()
    v0 = m.addVar()
    v1 = m.addVar()
    m.update()
    m.addConstr(v0-v1 <= 4) # Constraint 1
    m.addConstr(v0+v1 <= 4) # Constraint 2
    m.addConstr(-0.25*v0 + v1 <= 1) # Constraint 3
    m.setObjective(v1, GRB.MAXIMIZE) # Objective: maximize v1
    m.params.outputflag = 0
    m.optimize()
  #+END_SRC
  続いて, 下記を入力して実行:
  #+BEGIN_SRC python
    %matplotlib inline # これを実行すると, qtconsole 上にグラフをプロットできる
    import matplotlib.pyplot as pyplot
    pyplot.plot([0,4], [0,4]) # Constraint 1
    pyplot.plot([4,0], [0,4]) # Constraint 2
    pyplot.plot([0,4], [1,2]) # Constraint 3
    pyplot.plot([v0.x], [v1.x], 'ro') # Plot the optimal vertex
    pyplot.show()
  #+END_SRC
  こんな感じで, コマンドとグラフを同じウィンドウ上に表示させられる.
  #+ATTR_HTML: :width 700
  [[file:fig/jupyter_qtconsole.png]]

** jupyter notebook を使ってみる
- ターミナルから以下を入力:
  #+BEGIN_SRC sh
  mkdir ~/Downloads/jupyter_notebook
  pushd ~/Downloads/jupyter_notebook
  jupyter notebook 
  #+END_SRC
  行末に =&= をつけずに起動することで, 確実に kill できる.

  メニューバーから New > Notebooks > Python [default] を選択
  #+ATTR_HTML: :width 700
  [[file:fig/jupyter_notebook_new.png]]

- Markdown を記述

  最初のセルを選択した後, メニューバーのセル種別を =Markdown= に設定
  #+ATTR_HTML: :width 700
  [[file:fig/jupyter_notebook_markdown.png]]
  そのセルに 以下を記述:
  #+BEGIN_SRC text
    # Solve A Linear Programming Problem by Gurobi
    Use ```Gurobi``` to find the *optimal solution* for the following **linear programming problem**:
    \begin{align}
    \max_{v_{0}, v_{1}} \quad&v_{1}\\
    \text{sub to} \quad
    & v_{0} - v_{1} \leq 4 \\
    & v_{0} + v_{1} \leq 4 \\
    & -\tfrac{1}{4} v_{0} + v_{1} \leq 1 \\
    & v_{0} \geq 0, v_{1}, \geq 0
    \end{align}
  #+END_SRC
  =Shift+RET= で評価すると数式部分がコンパイルされる.
- 2つ目のセルの種別が =Code= になっていることを確認した上で, 以下を記述:
  #+BEGIN_SRC python
    %matplotlib inline # グラフのインライン表示に必要
    from gurobipy import *
    m = Model()
    v0 = m.addVar()                  # Unknown variable 1
    v1 = m.addVar()                  # Unknown variable 2
    m.update()                       # Update the model
    m.addConstr(v0-v1 <= 4)          # Constraint 1
    m.addConstr(v0+v1 <= 4)          # Constraint 2
    m.addConstr(-0.25*v0 + v1 <= 1)  # Constraint 3
    m.setObjective(v1, GRB.MAXIMIZE) # Objective: maximize v1
    m.params.outputflag = 0          # Silent mode
    m.optimize()                     # Do optimize
    import matplotlib.pyplot as pyplot
    pyplot.plot([0,4], [0,4])         # Constraint 1
    pyplot.plot([4,0], [0,4])         # Constraint 2
    pyplot.plot([0,4], [1,2])         # Constraint 3
    pyplot.plot([v0.x], [v1.x], 'ro') # The optimal solution
    pyplot.show()
  #+END_SRC
  =Shift+RET= でセルを評価するとグラフと最適解が表示される.
  #+ATTR_HTML: :width 700
  [[file:fig/jupyter_notebook.png]]
- タイトルを編集し, ノートブックに名前をつけて保存する
  - タイトルをダブルクリックすれば編集できる
  - メニューバーから File > Save & Checkpoint を選べば, 現在のノートブックを保存できる.
  
  #+ATTR_HTML: :width 700
  [[file:fig/jupyter_notebook_title_save.png]]

- 保存したノートブックは以下の方法で再度開くことができる:
  - ダッシュボードでダブルクリック
  - メニューバーから File > Open
  - ターミナルから
    #+BEGIN_SRC sh
      jupyter notebook [タイトル].ipynb 
    #+END_SRC
- File > Download as > PDF via LaTeX (.pdf) とすれば,
  LaTeX でコンパイルした上で PDF ファイルにしてくれる.
  日本語の入ったノートブックを PDF 化するには [[http://qiita.com/tttamaki/items/58ab3250202d2c17e233][ちょっと工夫]] が必要.

* COMMENT Gurobi を使ってみる
** Python を起動
ターミナルから以下を入力：
#+BEGIN_SRC sh
python
#+END_SRC

Python が起動し，プロンプトが =>>>= に変わる．以下，順に入力していく：
#+BEGIN_SRC sh
  >>> import gurobipy as grb                                      # Gurobi 用パッケージを grb という名前でimport
  >>> m = grb.read('/Library/gurobi562/mac64/examples/data/coins.lp') # デフォルトのインタラクティブ・モデルではファイル名のTAB補完は効かない
  Read LP format model from file /Library/gurobi562/mac64/examples/data/coins.lp # 読み込みファイル名，
  Reading time = 0.00 seconds     # 読み込みにかかった時間などが表示される
  (null): 4 rows, 9 columns, 16 nonzeros
  >>> m.optimize()                                                # 最適化メソッドを呼び出す
  Optimize a model with 4 rows, 9 columns and 16 nonzeros             # 最適化された結果が表示される
  Found heuristic solution: objective -0
  Presolve removed 1 rows and 5 columns
  Presolve time: 0.00s
  Presolved: 3 rows, 4 columns, 9 nonzeros
  Variable types: 0 continuous, 4 integer (0 binary)
  
  Root relaxation: objective 1.134615e+02, 4 iterations, 0.00 seconds
  
      Nodes    |    Current Node    |     Objective Bounds      |     Work
   Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time
  
       0     0  113.46154    0    1   -0.00000  113.46154     -      -    0s
  H    0     0                     113.4500000  113.46154  0.01%     -    0s
  
  Explored 0 nodes (4 simplex iterations) in 0.00 seconds
  Thread count was 8 (of 8 available processors)
  
  Optimal solution found (tolerance 1.00e-04)
  Best objective 1.134500000000e+02, best bound 1.134500000000e+02, gap 0.0%
  >>> for v in m.getVars():   # 「:」を入力した後改行すると，次のプロンプトが ... になる
  ...:     print v.varName, v.X   # print の前には TAB を押してインデントが必要
  ...:                         # 何も入力しないで改行すると for ブロックを抜られる
#+END_SRC
すると以下が表示されるはず:
#+BEGIN_SRC sh
  Pennies 0.0
  Nickels -0.0
  Dimes 2.0
  Quarters 53.0
  Dollars 100.0
  Cu 999.8
  Ni 46.9
  Zi 50.0
  Mn 30.0
#+END_SRC
Python のインタラクティブ・モードを終了するにはCtrl-D を入力．
#+BEGIN_SRC sh
  >>>                                 # ここで Ctrl-D とすると
  $                                   # Python モードが終了し，もとのターミナルのプロンプトに戻る
#+END_SRC

** 最小費用流問題を解いてみる
次のようなネットワークを対象として起点(a)から終点(d)まで $v=17$ 単位の製品を輸送
する最小費用流を求める問題を考える(ただし，各リンクの $c$ は輸送費用，$a$ は容量を表す)．
#+BEGIN_SRC dot :cmd neato :file fig/python_MCF_network.png :exports results
  digraph G{
          a [pos="0,0!"];
          b [pos="1,1!"];
          c [pos="1,-1!"];
          d [pos="2,0!"];
  
          a->b [label="c=2, a=10"];
          a->c [label="c=8, a=10"];
          b->c [headlabel="c=3, a=3", labeldistance=5, labelangle=0];
          b->d [headlabel="c=8, a=9", labeldistance=3, labelangle=-60];   
          c->d [headlabel="c=4, a=8", labeldistance=3, labelangle=60];
  }
#+END_SRC

#+RESULTS:
[[file:fig/python_MCF_network.png]]

*** モデルの定式化
ノード集合 $\ClN$ とリンク集合 $\ClA$ を以下のように定義する：
\[
\ClN = \{a, b, c, d\}, \ClA = \{(a, b), (a, c), (b, c), (b, d), (c, d)\}
\]

このとき，最小費用流問題は，以下の3つの要素で構成される：
1) 最小化すべき目的関数(総輸送費用)：

   \[
   \min_{\Vtx} \sum_{(i, j) \in \ClA} c_{i, j} x_{i, j}
   \]
2) 制約条件その1(各ノードでのフロー保存則)：
   
   \[
   \Subto{} \sum_{(i, n) \in \ClA} x_{i, n} - \sum_{(n, j) \in \ClA} 
   = b_{n}, \quad \forall n \in \ClN
   \]
   
   ただし，$b_{n}$ は，$n$ が起点(a)なら $-v$, $n$ が終点なら$v$, それ以外なら0
   となる定数．
3) 制約条件その2(非負制約)：
   
   \[
   x_{i, j} \geq 0, \quad \forall (i, j) \in \ClA
   \]

*** Gurobi で表現してみる
- まずは Python モードを起動:
  #+BEGIN_SRC sh
  $ python
  #+END_SRC
- リンクとノード集合を定義する：
  #+BEGIN_SRC sh
    >>> links = [('a','b'), ('a','c'), ('b', 'c'), ('b','d'),('c','d')]
    >>> nodes = ['a', 'b', 'c', 'd']
    >>> orig = 'a'                      # 起点
    >>> dest = 'd'                      # 終点
  #+END_SRC
- ノード集合は各リンクの起点もしくは終点の集まりなので，以下のように生成してもよ
  い．
  #+BEGIN_SRC sh
    >>> nodes = set([i for (i, j) in links] + [j for (i, j) in links])
  #+END_SRC
- 各リンクの費用と容量を設定する
  #+BEGIN_SRC sh
    >>> cost = dict(zip(links,[2,8,3,8,4]))
    >>> capacity = dict(zip(links, [10, 10, 3, 9, 8]))
  #+END_SRC
- 総輸送量を設定する
  #+BEGIN_SRC sh
    >>> total_volume = 17
  #+END_SRC
- Python 用 Gurobi パッケージを「grb」という名前で読み込む
  #+BEGIN_SRC sh
    >>> import gurobipy as grb
  #+END_SRC
- モデルを格納する grb.Model型変数 m を作成する
  #+BEGIN_SRC sh
    >>> m = grb.Model()
  #+END_SRC
- GRB.addVar()という関数を用いてリンクごとの未知変数を定義する．
  #+BEGIN_SRC sh
    >>> x = {}
    >>> for (i,j) in links:
    ...    x[i, j] = m.addVar(vtype=grb.GRB.CONTINUOUS, name="x_{%s,%s}" % (i, j)) # x[i, j]の前にはインデントが必要
    ...                             # 何も入力しないで改行
  #+END_SRC
- 目的関数を定義し，最大化/最小化のいずれを行うかを指定する
  #+BEGIN_SRC sh
    >>> m.update()                  # モデルに変数が追加されたことを反映させる
    >>> m.setObjective(grb.quicksum(x[i, j]*cost[i, j] for (i, j) in links)) # 目的関数
    >>> m.setAttr("ModelSense", grb.GRB.MINIMIZE) 
  #+END_SRC
- ノードごとのフロー保存則を追加する
  #+BEGIN_SRC sh
    >>> b = {}
    >>> for n in nodes:
    ...    # フロー保存則の右辺の定数を決定する
    ...    if n == orig:            # if の前にはインデントが必要
    ...        b[n] = - total_volume # b[n] の前には更にインデントが必要
    ...    elif n == dest:
    ...        b[n] = total_volume
    ...    else:
    ...        b[n] = 0
    ...    # ノードごとのフロー保存則
    ...    # 行末に「\」をつけると複数行にまたがって記述できる
    ...    m.addConstr(grb.quicksum(x[i, j] for (i, j) in links if j == n)\ 
    ...                - grb.quicksum(x[i, j] for (i, j) in links if i == n) \
    ...                == b[n], name="flow reservation at %s" % n)
    ...    # 空白行を入力することで for ブロックを抜けられる
  #+END_SRC
- 非負制約と容量制約を追加する
  #+BEGIN_SRC sh
    >>> for (i, j) in links:
    ...    x[i, j].lb = 0.0
    ...    x[i, j].ub = capacity[i, j]
    ...    # 空白行を入力することで for ブロックを抜けられる
  #+END_SRC
- モデルを更新し，mincostflow.lp に線形計画問題の形で出力する
  #+BEGIN_SRC sh
    >>> m.update()
    >>> m.write("mincostflow.lp")  
  #+END_SRC
- 最適化を行う
  #+BEGIN_SRC sh
    >>> m.optimize()
    Optimize a model with 4 rows, 5 columns and 10 nonzeros
    Presolve removed 2 rows and 3 columns
    Presolve time: 0.00s
    Presolved: 2 rows, 2 columns, 4 nonzeros
    
    Iteration    Objective       Primal Inf.    Dual Inf.      Time
           0    1.8000000e+02   2.000000e+00   0.000000e+00      0s
           1    1.8300000e+02   0.000000e+00   0.000000e+00      0s
    
    Solved in 1 iterations and 0.00 seconds
    Optimal objective  1.830000000e+02
  #+END_SRC
- 最適値と最適解(最小費用流)を表示させる
  #+BEGIN_SRC sh
    >>> print "optimal value:\t%8.4f" % m.ObjVal
    optimal value:  183.0000
    >>> for (i, j) in links:
    ...    print "%s:\t%8.4f" % (x[i, j].VarName, x[i, j].X)
    ...
    x_{a,b}:         10.0000
    x_{a,c}:          7.0000
    x_{b,c}:          1.0000
    x_{b,d}:          9.0000
    x_{c,d}:          8.0000
  #+END_SRC
** インタラクティブ・モードに疲れたら
インタラクティブ・モードで逐一コマンドを入力するのは面倒．そういう場合は，以下の
ようなスクリプト・ファイルに記述して呼び出せばいい．
#+BEGIN_SRC python
  #! /usr/bin/python
  # *-* encoding: utf-8 *-*
  
  # リンク集合
  links = [('a','b'), ('a','c'), ('b', 'c'), ('b','d'),('c','d')]
  # ノード集合
  nodes = ['a', 'b', 'c', 'd']
  orig = 'a'                      # 起点
  dest = 'd'                      # 終点
  
  # 各リンクの輸送費用
  cost = dict(zip(links,[2,8,3,8,4]))
  # 各リンクの容量
  capacity = dict(zip(links, [10, 10, 3, 9, 8]))
  # 起点から終点までの総輸送量
  total_volume = 17
  
  # Gurobi パッケージを grb という名前で import 
  import gurobipy as grb
  # print "%s:\t%8.4f" % (x[i, j].VarName, x[i, j].X)
  m = grb.Model()
  # 未知変数を x という辞書型変数に格納
  x = {}
  # addVar() という関数を用いてモデルに変数を追加する
  for (i,j) in links:
      x[i, j] = m.addVar(vtype=grb.GRB.CONTINUOUS, name="x_{%s,%s}" % (i, j))
  m.update()                  # モデルに変数が追加されたことを反映させる
  
  # 目的関数を設定し，最小化を行うことを明示する
  m.setObjective(grb.quicksum(x[i, j]*cost[i, j] for (i, j) in links))# 目的関数
  m.setAttr("ModelSense", grb.GRB.MINIMIZE)
  
  # 各ノードでのフロー保存則を追加する
  b = {}                          # フロー保存則の右辺の定数を設定する
  for n in nodes:
      if n == orig:
          b[n] = - total_volume
      elif n == dest:
          b[n] = total_volume
      else:
          b[n] = 0
      # ノードごとのフロー保存則
      # 行馬に「\」をつけると1つの行を複数行にまたがって記述できる
      m.addConstr(grb.quicksum(x[i, j] for (i, j) in links if j == n)\
                  - grb.quicksum(x[i, j] for (i, j) in links if i == n) \
                  == b[n], name="flow reservation at %s" % n)
  
  # 各ノードでの非負制約と容量制約を追加する
  for (i, j) in links:
      x[i, j].lb = 0.0
      x[i, j].ub = capacity[i, j]
  
  # モデルに制約条件が追加されたことを反映させる
  m.update()
  m.write("mincostflow.lp")       # mincostflow.lp というファイルに定式化されたモデルを出力する
  
  # 最適化を行い，結果を表示させる
  m.optimize()
  print "optimal value:\t%8.4f" % m.ObjVal
  for (i, j) in links:
      print "%s:\t%8.4f" % (x[i, j].VarName, x[i, j].X)
#+END_SRC

Python からファイルを呼び出すには，ターミナルで
#+BEGIN_SRC sh
$ python sampleMCF.py
#+END_SRC
とすればよい．
