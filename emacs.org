#+TITLE:     ITL/Emacs編
#+AUTHOR:    Takeshi Nagae
#+EMAIL:     nagae@m.tohoku.ac.jp
#+LANGUAGE:  ja
#+OPTIONS:   H:3 num:3 toc:2 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:t creator:t
#+OPTIONS:   TeX:t LaTeX:dvipng skip:nil d:nil todo:nil pri:nil tags:not-in-toc timestamp:t
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+OPTIONS: toc:1 num:3

#+INFOJS_OPT: path:org-info.js
#+INFOJS_OPT: view:showall toc:nil sdepth:3 ltoc:2
#+INFOJS_OPT: toc:t tdepth:1 view:showall mouse:underline buttons:nil
#+INFOJS_OPT: up:../ home:../

#+STYLE: <link rel=stylesheet href="style.css" type="text/css">

* Emacs --- 最強のエディタ
** インストール方法
1. 本体を Homebrew でインストール
   #+begin_src screen
     $ brew install --cocoa emacs
     :
     :
     ==> Caveats A command line wrapper for the cocoa app was installed to:
      /usr/local/Cellar/emacs/24.3/bin/emacs
     
     .app bundles were installed to /usr/local/Cellar/emacs/24.3 (or libexec).
     Run brew linkapps to symlink these to /Applications.
     ==> Summary
      /usr/local/Cellar/emacs/24.3: 3909 files, 114M, built in 3.3 minutes
   #+end_src
2. 上記の実行結果を参考に，アプリケーション・フォルダにシンボリックリンクを張る(以前に比べてコマンドが簡単になりました)．
   #+begin_src screen
   $ brew linkapps
   #+end_src
3. Spotlight で呼び出せるように Automator でアプリケーションとして登録
   1) [[file:/Applications/Automator.app][Automator.app]] を起動し，メニューから「アプリケーション」を選択
      #+attr_html: alt="Automator設定画面" align="center" width="600"
      [[file:fig/emacs_Automator_1.png]]
   2) 検索窓に「シェルスクリプトを実行」と入力
   3) 「シェルスクリプトを実行」と書かれたアイコンをダブルクリック
   4) デフォルトで =cat= と書かれたシェルスクリプトを以下に変更：
     #+begin_src screen
     open -a /Applications/Emacs.app
     #+end_src
   5) ファイル名を =Emacs.app= として iCloud フォルダに保存する
** 長江研 Emacs 設定方針
Emacs は初期設定ファイル(=~/.emacs.d/init.el=)が極めて重要な役割を果たす[1]．同じ
Emacs を使っていても，初期設定ファイルが違うと全く違うアプリケーションのように感
じる．そのため，マシンごとに別々の初期設定ファイルを用いると，複数のマシンで作業
する(eg. 研究室の作業を自宅で引き継ぐ)際に作業効率が著しく低下する．そこで，以下
では，次のポリシーに従った設定方法を述べる：
- 環境変数や homebrew のパスなど，マシン固有の設定はローカル上の =~/.emacs.d/init.el= に記述
- それ以外の初期設定ファイルは Dropbox上の =~/Dropbox/.emacs.d/= 以下に置く
- ELPA(Emacs Lisp Package Archives)を積極的に利用．通常，これらのファイルはローカルの =~/.emacs.d/elpa/= 以下に置かれるが，ここでは，これをDropbox 上の =~/Dropbox/.emacs.d/elpa= へのシンボリックリンクとして設定．
- ELPAでインストールできないlispファイル群は Dropbox 上の =~/Dropbox/.emacs.d/lisp= 以下に置く．

[1] =.emacs.d= のように先頭に =.= のついたファイルやフォルダは隠しファイル/隠しフォ
ルダであり，普段はFinder や =ls= コマンドで見ることはできない．これらを見るには，
ターミナルから以下のように入力する：
#+begin_src screen
$ ls -a ~/
#+end_src
** Emacs の初期設定
1. ローカルの初期設定フォルダを作成：
   #+begin_src screen
   $ mkdir ~/.emacs.d/
   #+end_src
2. =~/.emacs.d/init.el= を以下のように設定する：
   #+html: <script src="https://gist.github.com/nagae/5269225.js"></script>
   
   なお，上記ファイルは以下の手順でダウンロードすることも可能：
   #+begin_src screen
   $ cd ~/.emacs.d
   $ curl -O https://gist.github.com/nagae/5269225/raw/init.el
   #+end_src
   =curl -O foo= は指定されたインターネット上のファイルを同じ名前で現在のディレクトリに保存するコマンド．
3. リポジトリからDropbox 上に設定ファイルを読み込む：
   1) Bitbucket と Github に SSH 公開鍵アクセスが可能か調べる
      #+BEGIN_SRC text
        $ ssh git@bitbucket.org
        PTY allocation request failed on channel 0
        conq: logged in as ***.
        
        You can use git or hg to connect to Bitbucket. Shell access is disabled.
        Connection to bitbucket.org closed.
      #+END_SRC
      =You can use git or hg to connect to Bitbucket.= と表示されれば OK.
      #+BEGIN_SRC text
        $ ssh git@github.com
        PTY allocation request failed on channel 0
        Hi ****! You've successfully authenticated, but GitHub does not provide shell access.
        Connection to github.com closed.
      #+END_SRC
      =Hi ****! You've successfully authenticated= と表示されればOK(****は Github.com のアカウント名)．
   2) アクセスできない場合は以下の手順を試してみる：
      - [[Github%20/%20Bitbucket%20%E3%81%AB%20SSH%20%E3%81%A7%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B][Github / Bitbucket に SSH で接続する]] の設定を確認
      - =~/.ssh/known_host= から =github.com= や =bitbucket.org= を含む行を削除する
      - 秘密鍵を指定してSSHでアクセスしてみる: 具体的には，ターミナルから以下を入力
        #+BEGIN_SRC screen
          $ ssh -i ~/.ssh/id_rsa git@bitbucket.org
          $ ssh -i ~/.ssh/id_rsa git@github.com
        #+END_SRC
   3) Bitbucket / Github にアクセスできることを確認したら，ターミナルから以下を実行：
      #+BEGIN_SRC screen
      $ cd ~/Dropbox/
      $ git clone --recursive git@bitbucket.org:nagae/.emacs.d.git
      #+END_SRC
4. Dropbox のlisp用フォルダへのシンボリックリンクをローカルの設定フォルダ =~/.emacs.d/= に置く：
   #+BEGIN_SRC screen
      $ ln -s ~/Dropbox/.emacs.d/elpa ~/.emacs.d # Dropbox上の elpa フォルダへのシンボリックリンクを張る
   #+END_SRC
** 初期設定ファイルの更新
- 上記の初期設定ファイルは適宜更新される．更新を反映するにはターミナルから以下を実行する：
  #+BEGIN_SRC screen
    $ cd ~/Dropbox/.emacs.d
    $ git pull
  #+END_SRC
- =lisp/spaces= など，一部の lisp は別のリポジトリを(submodule として)取り込んでいるので，以下で最新のものに更新できる(はず)：
  #+BEGIN_SRC screen
    $ cd ~/Dropbox/.emacs.d
    $ git submodule update --init --recursive
    $ git submodule update --recursive
  #+END_SRC
- =--init= オプションをつけると初期化のみを行うようです([[http://stackoverflow.com/questions/10168449/git-update-submodule-recursive][参考]])．
- =git pull= あたりでどうにもうまく行かないときは，=~/Dropbox/.emacs.d= 自体を clone し直してみる：
  #+BEGIN_SRC screen
    $ cd ~/Dropbox                  # ~/Dropbox に移動
    $ mv .emacs.d .emacs.d.backup   # .emacs.d を別名で退避
    $ git clone --recursive git@bitbucket.org:nagae/.emacs.d.git   # 最新版を clone
  #+END_SRC
  後は =.emacs.d.backup= の中身を適宜 =.emacs.d= に書き写していけばいい

** 基本的な操作方法
*** 特殊キー
上記の設定の下では，Emacs で用いる特殊キーは以下のように割当てられる．
#+ATTR_HTML: border="2" rules="all"
|------------+----------+--------------------|
| 特殊キー名 | 省略表記 | キーボード上のキー |
|------------+----------+--------------------|
| Control    | C-       | caps lock          |
| Meta       | M-       | command (⌘)        |
| Super      | s-       | option (alt)       |
|------------+----------+--------------------|
| Return     | RET      | return (enter)     |
| Tab        | TAB      | tab                |
| Delete     | DEL      | delete             |
| Esc        | ESC      | esc                |
|------------+----------+--------------------|
[[file:fig/Emacs/Control_Meta_Super.png]]

以降では，caps lock を「Control キー」，command (⌘) を「Meta キー」，option(alt) を「super キー」と呼ぶことにする．
*** 同時押しと順次押し
Emacs では，特殊キーとそれ以外のキーの組み合わせ(キーバインド)によって多彩な操作が可能である．
全てのキー操作は「同時押し」と「順次押し」で構成される．
- 同時押し :: 特殊キーとそれ以外のキーを @同時@ に押すこと．ハイフン(-)で表現される．
  - =C-g= :: Control と g を同時に押す
  - =M-x= :: Meta と x を同時に押す
  - =C-x-n= :: Control と Meta と n を同時に押す
- 順次押し :: あるキーや同時押しの @後で@, 別のキーや同時押しを入力すること．空白記号で区切って表現される．
  - =C-x C-s= :: C-x の後で C-s を入力する
  - =M-x info= :: M-x の後で「info」と入力する
  - =C-x RET f= :: C-x, リターンキー, f の順に入力する
特殊キーと
*** まずはパニック対応(=ESC, C-g=)
操作中に予期せぬ画面になってしまった時は，=ESC= か =C-g= (Control と g の同時押し)を押すことで，大抵，元の画面に戻ってこれる．
1. Emacs を起動すると，最初はこのような画面(eshell)が現れるはずだ．
   #+ATTR_HTML: width="600"
   [[file:fig/Emacs/initial_window.png]]
2. =C-h C-h= (Controlキー と h の同時押しを2回)を入力する．
3. こんな画面になってしまう
   #+ATTR_HTML: width="600"
   [[file:fig/Emacs/C-h_C-h_window.png]]
4. 慌てずに =ESC= を押せば，元の画面に戻る．
5. 今度は =C-x C-u= (Control キーと x の同時押しの後，Control と u の同時押し)を入力する．
6. こんな画面になるはずだ
   #+ATTR_HTML: width="600"
   [[file:fig/Emacs/C-x_C-u_window.png]]
7. この画面は =ESC= を入力しても消えてくれない．そんな時も慌てず =C-g= を入力すれば，元の画面に戻る．
*** カーソルの操作
Emacs では，十字キーではなく，キーバインドでもカーソルを操作できる．最初は十字キーの方が楽なように思うだろうが，慣れてくると十字キーに手を伸ばすのが億劫になってくるはずだ．最初の画面(eshell)で色々試してみよう．
#+ATTR_HTML: border="2" rules="all"
|--------------+-------------------------------|
| キーバインド | 動作                          |
|--------------+-------------------------------|
| =C-f=        | カーソルを右(前)へ            |
| =C-b=        | カーソルを左(後)へ            |
| =C-n=        | カーソルを下(次の行)へ        |
| =C-p=        | カーソルを上(前の行)へ        |
| =C-a=        | カーソルを行の先頭へ          |
| =C-e=        | カーソルを行の末尾へ          |
|--------------+-------------------------------|
| =M-f=        | カーソルを1単語右(前)へ       |
| =M-b=        | カーソルを1単語左(後)へ       |
| =C-v=        | カーソルを1画面下(次の画面)へ |
| =M-v=        | カーソルを1画面上(前の画面)へ |
| =M-<=        | カーソルをバッファの先頭へ    |
| =M->=        | カーソルをバッファの末尾へ    |
|--------------+-------------------------------|
| =DEL=        | カーソルの @前@ の1文字を消去 |
| =C-d=        | カーソルの @後@ の1文字を消去 |
|--------------+-------------------------------|
** 参考資料
順次書いていきますが膨大なので，まずは [[http://www.amazon.co.jp/dp/4774150029][Emacs 実践入門]] の§2.3以降を読みながら各自で慣れていって下さい．
** 独自設定
https://bitbucket.org/nagae/.emacs.d で公開している設定ファイルでは，
[[http://www.amazon.co.jp/dp/4774150029][Emacs 実践入門]] に記載されていないような独自のキーバインドがいくつかある．
*** 基本操作
- ウィンドウの切り替え(=C-;=) :: =C-x o= だけでなく =C-;= でもウィンドウが切り替えられる．
- 指定行への移動(=M-g=) :: =M-x goto-line= を =M-g= だけで起動できる
- バッファ切り替え(=C-x b=) :: =C-x b= で [[http://www.bookshelf.jp/soft/meadow_28.html#SEC370][iswitchb]] を起動できる．カーソルの左右と =C-f, C-b= で次のバッファ/前のバッファを選択できる．
- 前後のバッファへの瞬時切り替え(=C-<, C->=) :: バッファ切り替えを立ち上げなくても =C-<= で前のバッファ， =C->= で後のバッファに切り替えられる
*** Anything
- =s-a= (option キーと a の同時押し) :: =s-a= でanything-for-files を起動
*** もっとある
便利な独自機能はまだ沢山あるが鋭意執筆中．
